/**
 *  Copyright 2011 Diego Ceccarelli
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
package eu.europeana.assets.service.ir.text.cli;

import java.io.File;
import java.util.Arrays;
import java.util.List;

import org.apache.log4j.Logger;

import eu.europeana.assets.common.exception.ObjectNotFoundException;
import eu.europeana.assets.common.exception.ObjectNotStoredException;
import eu.europeana.assets.service.ir.text.IRTextConfiguration;
import eu.europeana.assets.service.ir.text.learning.Evaluate;

/**
 * AbstractCommandLineInterface.java
 * 
 * 
 * finds the best parameter set for BM25F using the <i>line search</i>
 * algorithm. The algorithm works as follows. Given an initial point in the
 * parameter space, a search along each coordinate axis is performed by varying
 * one parameter only and keeping fixed the others. For each sample point, the
 * NDCG is computed, and the location corresponding to the best NDCG is
 * recorded. Such location identifies a promising search direction. Therefore, a
 * line search is performed along the direction from the starting point to the
 * best NDCG location. If the parameter space has dimension k, we need to
 * perform k+1 line searches to complete an iteration, or epoch, and possibly
 * move to an improved solution. The new solution is then used as the starting
 * point of the next iteration. This
 * iterative process continues until no improvement is found, or a maximum
 * number of epochs is reached.
 * 
 * @author Diego Ceccarelli, diego.ceccarelli@isti.cnr.it created on 09/ott/2011
 */

public class LearningToRankCLI extends AbstractCommandLineInterface {

	private static Logger logger = Logger.getLogger(LearningToRankCLI.class);

	private static final String MAX_STEPS = "steps";

	private static IRTextConfiguration irTextConfig;
	protected static String usage = "java -cp $jar " + LearningToRankCLI.class
			+ " -input assessment folder -" + MAX_STEPS + " max number of steps";

	protected static String[] params = new String[] { INPUT, MAX_STEPS };

	public LearningToRankCLI(String[] args) {
		super(args);
		irTextConfig = new IRTextConfiguration();
		irTextConfig.init();
	}

	public LearningToRankCLI(String[] args, String[] parameters, String usage) {
		super(args, parameters, usage);
		irTextConfig = new IRTextConfiguration();
		irTextConfig.init();
	}

	public static void main(String[] args) throws ObjectNotStoredException,
			ObjectNotFoundException {

		LearningToRankCLI cli = new LearningToRankCLI(args, params, usage);
		String assessmentFolder = cli.getInput();
		File dir = new File(assessmentFolder);
		List<String> fields = Arrays.asList(new String[] { "text", "title",
				"description", "subject", "what" });
		// List<String> fields = Arrays.asList(new String[] {"text"});

		Evaluate evaluator = new Evaluate(dir, fields);
		try {
			evaluator.setMaxSteps(Integer.parseInt(cli.getParam(MAX_STEPS)));
		} catch (Exception e) {
			System.out.println(usage);
			System.exit(-1);
		}
		long start = System.currentTimeMillis();
		String snippet = evaluator.learningToRank();

		System.out.println("<!-- copy this in the solrconfig file -->");
		System.out.println(snippet);

		long end = System.currentTimeMillis();
		System.out.println("time elapsed: " + (end - start));

		System.exit(0);

	}
}